#cd ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏≤‡∏ò  n8n
#source ocr-env/bin/activate
#cd ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏≤‡∏ò typhoon_ocr
#uvicorn ocr_main:app --host 0.0.0.0 --port 8118 --reload

from fastapi import FastAPI, HTTPException
from fastapi.responses import FileResponse
import os
from typhoon_ocr import ocr_document

app = FastAPI()

# üîê API KEY ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
TYPHOON_API_KEY = "sk-LeVrQgRVU7ZlPcUMihmohXqum6pTfZWTP7qXJmirvWN19Bdf"
os.environ['TYPHOON_OCR_API_KEY'] = TYPHOON_API_KEY

# üìÅ Path ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ
FOLDER_PATH = "/home/gb/n8n/ads_testing"

# ‚úÖ 1. List ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
@app.get("/list-folder")
def list_folder():
    if not os.path.isdir(FOLDER_PATH):
        raise HTTPException(status_code=404, detail="‚ùå Folder not found")

    files = [f for f in os.listdir(FOLDER_PATH)
             if os.path.isfile(os.path.join(FOLDER_PATH, f))]

    return {"folder": FOLDER_PATH, "total": len(files), "files": files}

# ‚úÖ 2. OCR ‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ filename
@app.post("/ocr-single-file")
def ocr_single_file(filename: str):
    file_path = os.path.join(FOLDER_PATH, filename)

    if not os.path.isfile(file_path):
        raise HTTPException(status_code=404, detail="‚ùå File not found")

    try:
        text = ocr_document(file_path)
        return {"filename": filename, "text": text}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
# ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏öanalyze file 
@app.get("/file")
def get_file(filename: str):
    file_path = os.path.join(FOLDER_PATH, filename)
    if not os.path.isfile(file_path):
        raise HTTPException(status_code=404, detail="File not found")
    return FileResponse(file_path, media_type="image/jpeg")